import type { PlaceItem, GeoJSONPoint } from "../types";

// ‡πÉ‡∏ä‡πâ VITE_API_URL ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô
const API_URL = import.meta.env.VITE_API_URL;

let routeRequestLock = false;
let lastRouteTimestamp = 0;

async function apiRequest(endpoint: string, body: object, method: 'POST' | 'GET' = 'POST'): Promise<any> {
  const now = Date.now();
  if (routeRequestLock && now - lastRouteTimestamp < 700) {
    console.warn(`Skipped duplicate route API call: ${endpoint}`);
    return { success: false, message: "Skipped duplicate route request" };
  }
  routeRequestLock = true;
  lastRouteTimestamp = now;

  try {
    const res = await fetch(`${API_URL}${endpoint}`, {
      method,
      credentials: "include",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body),
    });

    if (!res.ok) {
      let msg = `HTTP error! status: ${res.status}`;
      try {
        const data = await res.json();
        msg = data.message || msg;
      } catch {}
      throw new Error(msg);
    }

    return await res.json();
  } catch (error) {
    const message = error instanceof Error ? error.message : "A network error occurred.";
    console.error(`API request error to ${endpoint}:`, message);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° fallback ‡∏ï‡∏£‡∏ß‡∏à GOOGLE_PLACES_API_KEY ‡∏´‡∏≤‡∏¢
    if (message.includes("missing GOOGLE_PLACES_API_KEY")) {
      console.warn("‚ö†Ô∏è Missing GOOGLE_PLACES_API_KEY ‚Äî check backend .env or config file");
    }

    return { success: false, message };
  } finally {
    setTimeout(() => (routeRequestLock = false), 600);
  }
}

// üîΩ 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API /route/ üîΩ
/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å origin ‡πÑ‡∏õ destination ‡πÇ‡∏î‡∏¢‡∏≠‡∏≤‡∏à‡∏°‡∏µ waypoints
 * @param origin - ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
 * @param destination - ‡∏à‡∏∏‡∏î‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
 * @param waypoints - ‡∏à‡∏∏‡∏î‡πÅ‡∏ß‡∏∞ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
 */
export async function getDirections(
  origin: GeoJSONPoint, 
  destination: GeoJSONPoint, 
  waypoints: GeoJSONPoint[] = []
): Promise<{ success: boolean; route?: any; message?: string }> {
  return apiRequest('/auth/route/', { origin, destination, waypoint: waypoints });
}


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API /route/withTSP (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
export async function optimizeDayRoute(places: PlaceItem[]): Promise<{ success: boolean; ordered?: PlaceItem[]; route?: any; message?: string }> {
  return apiRequest('/auth/route/withTSP', { places });
}