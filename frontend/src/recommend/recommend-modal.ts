// src/recommend/recommend-modal.ts
import { fetchRecommendationsFromAPI, type PlaceRecommendation } from './recommender.js';
import { showDaySelectionPopup } from '../pages/planner/index.js';

const modal = document.getElementById('recommend-modal');
const closeBtn = document.getElementById('recommend-close');
const provinceInput = document.getElementById('province-input') as HTMLInputElement | null;
const chipsContainer = document.getElementById('province-chips');
const suggestionsContainer = document.getElementById('province-suggestions');
const resultEl = document.getElementById('recommend-results');

// ‚úÖ modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
const descModal = document.getElementById('desc-modal');
const descTitle = document.getElementById('desc-title');
const descText = document.getElementById('desc-text');
const descClose = document.getElementById('desc-close');

const PROVINCES_TH: string[] = [
  '‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà', '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', '‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', '‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå', '‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£', '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', '‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤', '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ', '‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó',
  '‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥', '‡∏ä‡∏∏‡∏°‡∏û‡∏£', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏ï‡∏£‡∏±‡∏á', '‡∏ï‡∏£‡∏≤‡∏î', '‡∏ï‡∏≤‡∏Å', '‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å', '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°', '‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°', '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤',
  '‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä', '‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå', '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™', '‡∏ô‡πà‡∏≤‡∏ô', '‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨', '‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå', '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå',
  '‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', '‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ', '‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤', '‡∏û‡∏∞‡πÄ‡∏¢‡∏≤', '‡∏û‡∏±‡∏á‡∏á‡∏≤', '‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á', '‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£', '‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å', '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ', '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå',
  '‡πÅ‡∏û‡∏£‡πà', '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', '‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°', '‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£', '‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô', '‡∏¢‡πÇ‡∏™‡∏ò‡∏£', '‡∏¢‡∏∞‡∏•‡∏≤', '‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î', '‡∏£‡∏∞‡∏ô‡∏≠‡∏á', '‡∏£‡∏∞‡∏¢‡∏≠‡∏á', '‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ',
  '‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ', '‡∏•‡∏≥‡∏õ‡∏≤‡∏á', '‡∏•‡∏≥‡∏û‡∏π‡∏ô', '‡πÄ‡∏•‡∏¢', '‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©', '‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£', '‡∏™‡∏á‡∏Ç‡∏•‡∏≤', '‡∏™‡∏ï‡∏π‡∏•', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£',
  '‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß', '‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢', '‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå', '‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢', '‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π',
  '‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á', '‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç', '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå', '‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ'
];

let selectedProvinces: string[] = [];

// ‚úÖ Render chips
function renderChips(): void {
  if (!chipsContainer) return;
  chipsContainer.innerHTML = '';
  selectedProvinces.forEach((province, idx) => {
    const chip = document.createElement('span');
    chip.className = 'chip';
    chip.innerHTML = `${province} <i class="bx bx-x"></i>`;
    chip.querySelector('i')?.addEventListener('click', () => {
      selectedProvinces.splice(idx, 1);
      renderChips();
      renderResults();
    });
    chipsContainer.appendChild(chip);
  });
}

// ‚úÖ Render result list (new design)
async function renderResults(): Promise<void> {
  if (!resultEl) return;
  if (selectedProvinces.length === 0) {
    resultEl.innerHTML = `<div class="rec-empty">‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</div>`;
    return;
  }

  resultEl.innerHTML = `<div class="rec-loading">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>`;

  try {
    const places = await fetchRecommendationsFromAPI(selectedProvinces, ['tourist_attraction'], 30);
    if (!places.length) {
      resultEl.innerHTML = `<div class="rec-empty">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</div>`;
      return;
    }

    const listHTML = await Promise.all(
      places.map(async (p) => {
        const imgSrc = await getPlacePhoto(p.place_id);
        const name = p.name ?? '(‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠)';
        const province = extractProvince(p.address);
        const ratingText = p.rating
          ? `‚òÖ ${p.rating.toFixed(1)} (${p.rating_count || 0})`
          : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô';
        const categories = p.categories?.join(', ') || '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ';

        return `
          <div class="rec-card">
            <div class="rec-thumb">
              ${imgSrc
                ? `<img src="${imgSrc}" alt="${name}" loading="lazy" />`
                : `<div class="no-photo">üèûÔ∏è</div>`}
            </div>
            <div class="rec-info">
              <h4 class="rec-name">${name}</h4>
              <div class="rec-sub">${ratingText}</div>
              <div class="rec-cat">${categories}</div>
              <div class="rec-actions">
                <button class="rec-add" data-pid="${p.place_id}" data-name="${name}" data-addr="${province}">
                  <i class='bx bx-plus'></i> Add
                </button>

                ${p.detail ? `
                <button class="rec-detail" data-name="${name}" data-detail="${p.detail}">
                  <i class='bx bx-info-circle'></i> Info
                </button>` : ''}

                ${p.url ? `
                <a href="${p.url}" target="_blank" rel="noopener noreferrer" class="rec-map">
                  <i class='bx bx-map'></i> Map
                </a>` : ''}
              </div>
            </div>
          </div>
        `;
      })
    );

    // üß± ‡πÉ‡∏ä‡πâ class ‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö CSS
    resultEl.innerHTML = `
      <div class="recommend-results">
        ${listHTML.join('')}
      </div>
    `;

    // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°
    resultEl.querySelectorAll<HTMLButtonElement>('.rec-add').forEach((btn) => {
      btn.onclick = () => {
        const pid = btn.dataset.pid!;
        const name = btn.dataset.name!;
        const province = btn.dataset.addr!;
        showDaySelectionPopup(name, 0, 0, pid);
        if (modal) modal.classList.remove('active');
      };
    });

    // ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    resultEl.querySelectorAll<HTMLButtonElement>('.rec-detail').forEach((btn) => {
      btn.onclick = () => {
        if (!descModal || !descTitle || !descText) return;
        descTitle.textContent = btn.dataset.name || '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà';
        descText.textContent = btn.dataset.detail || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ';
        descModal.classList.add('active');
      };
    });

  } catch (err) {
    console.error('[recommend-modal] renderResults failed:', err);
    resultEl.innerHTML = `<div class="rec-empty">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>`;
  }
}

// ‚úÖ Helper: extract province from address
function extractProvince(address: string | null): string {
  if (!address) return '';
  const parts = address.split(' ');
  return parts[parts.length - 1];
}

// ‚úÖ Helper: fetch real photo from Google Places
async function getPlacePhoto(placeId: string): Promise<string | null> {
  return new Promise((resolve) => {
    if (!window.google?.maps?.places) {
      console.warn("Google Maps Places library not ready.");
      resolve(null);
      return;
    }

    const map = document.createElement("div");
    const service = new google.maps.places.PlacesService(map);

    service.getDetails(
      { placeId, fields: ["photos"] },
      (place, status) => {
        if (status === google.maps.places.PlacesServiceStatus.OK && place?.photos?.length) {
          const url = place.photos[0].getUrl({ maxWidth: 400 });
          resolve(url);
        } else {
          resolve(null);
        }
      }
    );
  });
}

// ‚úÖ Province selection logic
function selectProvince(province: string): void {
  if (!selectedProvinces.includes(province)) selectedProvinces.push(province);
  if (provinceInput) provinceInput.value = '';
  if (suggestionsContainer) suggestionsContainer.style.display = 'none';
  renderChips();
  renderResults();
}

function renderSuggestions(inputValue: string): void {
  if (!suggestionsContainer) return;
  if (!inputValue) {
    suggestionsContainer.style.display = 'none';
    return;
  }

  const filtered = PROVINCES_TH.filter(
    (p) => p.startsWith(inputValue) && !selectedProvinces.includes(p)
  );

  if (!filtered.length) {
    suggestionsContainer.style.display = 'none';
    return;
  }

  suggestionsContainer.innerHTML = '';
  filtered.slice(0, 5).forEach((province) => {
    const item = document.createElement('div');
    item.className = 'suggestion-item';
    item.textContent = province;
    item.onclick = () => selectProvince(province);
    suggestionsContainer.appendChild(item);
  });
  suggestionsContainer.style.display = 'block';
}

// ‚úÖ Event listeners
if (closeBtn && modal) closeBtn.onclick = () => modal.classList.remove('active');
if (provinceInput) {
  provinceInput.addEventListener('input', () => renderSuggestions(provinceInput.value));
  document.addEventListener('click', (e: MouseEvent) => {
    const t = e.target as HTMLElement;
    if (!provinceInput.contains(t) && !suggestionsContainer?.contains(t)) {
      if (suggestionsContainer) suggestionsContainer.style.display = 'none';
    }
  });
}

// ‚úÖ ‡∏õ‡∏¥‡∏î modal ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
if (descClose && descModal) {
  descClose.onclick = () => descModal.classList.remove('active');
  descModal.addEventListener('click', (e) => {
    if (e.target === descModal) descModal.classList.remove('active');
  });
}
