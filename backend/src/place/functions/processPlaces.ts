// src/place/services/processPlaces.ts

import { Place, ResolveInput } from '../types/place.type';
import { findPlaceInDB } from './findPlaceInDB';
import { fetchGooglePlaceDetails } from './fetchGooglePlaceDetails';
import { savePlaceToDB } from './savePlaceToDB';
import { updatePlaceInDB } from './updatePlaceInDB';

/**
 * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô DB, ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Google ‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô, ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 *
 * @param inputs - Array ‡∏Ç‡∏≠‡∏á ResolveInput ‡∏ó‡∏µ‡πà‡∏°‡∏µ GGM ID ‡πÅ‡∏•‡∏∞ Location
 * @param apiKey - Google Maps API Key
 * @returns A Promise that resolves to an array of complete `Place` objects.
 */
export async function processPlaces(
  inputs: ResolveInput[],
  apiKey: string
): Promise<Place[]> {
  if (!apiKey) throw new Error('Google Maps API Key is required.');

  const STALE_PERIOD_MONTHS = 3;
  const threeMonthsAgo = new Date();
  threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - STALE_PERIOD_MONTHS);

  const placePromises = inputs.map(async (input) => {
    try {
      const existingPlace = await findPlaceInDB(input.place_id_by_ggm, input.location);

      if (!existingPlace) {
        console.log(`[CREATE] üïµÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö "${input.place_id_by_ggm}", ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...`);
        const newPlace = await fetchGooglePlaceDetails(input.place_id_by_ggm, apiKey);
        if (newPlace) {
          await savePlaceToDB(newPlace);
          return newPlace;
        }
        return null;
      }

      if (existingPlace.last_update_data < threeMonthsAgo) {
        console.log(`[UPDATE] üîÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á "${existingPlace.name_place}" ‡πÄ‡∏Å‡πà‡∏≤, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï...`);
        const freshPlace = await fetchGooglePlaceDetails(input.place_id_by_ggm, apiKey);
        if (freshPlace) {
          // ‡πÉ‡∏ä‡πâ Primary Key ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
          return await updatePlaceInDB(existingPlace.place_id, freshPlace);
        }
        console.warn(`[UPDATE-WARN] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "${existingPlace.name_place}", ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤`);
        return existingPlace;
      }

      console.log(`[CACHE HIT] ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á "${existingPlace.name_place}" ‡∏¢‡∏±‡∏á‡πÉ‡∏´‡∏°‡πà, ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DB`);
      return existingPlace;

    } catch (error) {
      console.error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ${input.place_id_by_ggm}:`, error);
      return null;
    }
  });

  const settledResults = await Promise.all(placePromises);
  return settledResults.filter((p): p is Place => p !== null);
}