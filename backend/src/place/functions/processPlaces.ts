// src/place/services/processPlaces.ts
import type { ITask, IDatabase } from "pg-promise";
import { db } from "../../database/db-promise";
import type { place } from "../../database/database.types";
import type { ResolveInput, PlaceInsert, PlacePatch } from "../types/types";
import { findPlaceInDB } from "../functions/findPlaceInDB";
import { fetchGooglePlaceDetails } from "../functions/fetchGooglePlaceDetails";
import { savePlaceToDB } from "../functions/savePlaceToDB";
import { updatePlaceInDB } from "./updatePlaceInDB";
import { savePlaceLocationToDB } from "./savePlaceLocationToDB";
import { TypeOverrides } from "pg";

const runner = (t?: ITask<any> | IDatabase<any>) => (t as any) ?? db;
const STALE_DAYS = 30;
const isStale = (d?: Date) =>
  d ? Date.now() - new Date(d).getTime() > STALE_DAYS * 86400 * 1000 : true;

/**
 * Resolve ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (place) ‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏ñ‡∏ß‡∏à‡∏≤‡∏Å DB (‡∏°‡∏µ id ‡πÄ‡∏™‡∏°‡∏≠) ‡πÇ‡∏î‡∏¢‡∏¢‡∏∂‡∏î Google Place ID ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
 *
 * ### ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°
 * 1) ‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ `input.place_id_by_ggm` ‡πÄ‡∏û‡∏∑‡πà‡∏≠ resolve ‡∏à‡∏≤‡∏Å Google (‡∏´‡∏≤‡∏Å DB ‡πÑ‡∏°‡πà‡∏°‡∏µ/‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤)
 * 2) ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å DB ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢ `place_id_by_ggm`
 * 3) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô DB ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ `STALE_DAYS` ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Google Place Details ‡∏î‡πâ‡∏ß‡∏¢ place_id
 * 4) ‡∏ó‡∏≥ upsert ‡∏ï‡∏≤‡∏° `place_ID_by_ggm`:
 *    - ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‚Üí update ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà (name/address/geometry/rating/‚Ä¶)
 *    - ‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí insert ‡πÉ‡∏´‡∏°‡πà
 * 5) **‡πÑ‡∏°‡πà** ‡∏¢‡∏¥‡∏á Google ‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ
 * 6) ‡∏ñ‡πâ‡∏≤ caller ‡∏™‡πà‡∏á input ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ `place_id_by_ggm`:
 *    - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ `location` ‡∏à‡∏∞ ‚Äú‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô DB‚Äù ‡πÉ‡∏´‡πâ (‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î) ‚Üí ‡∏û‡∏ö‡∏Å‡πá‡∏Ñ‡∏∑‡∏ô, ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡πá `throw "place_id_required"`
 *
 * ### Transaction
 * - ‡∏ñ‡πâ‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢ `t` (pg-promise task/transaction) ‡∏à‡∏∞‡∏ú‡∏π‡∏Å‡∏ó‡∏∏‡∏Å query ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô transaction ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
 * - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á `t` ‡∏°‡∏≤ ‡∏à‡∏∞ fallback ‡πÉ‡∏ä‡πâ `db` ‡∏õ‡∏Å‡∏ï‡∏¥
 *
 * @param tOrApiKey  ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏ö‡∏ö (t, apiKey, input) ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á `t` ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô; ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏ö‡∏ö (apiKey, input) ‡∏Å‡πá‡πÑ‡∏î‡πâ
 * @param maybeApiKey ‡∏Ñ‡πà‡∏≤ API key ‡∏Ç‡∏≠‡∏á Google Places (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
 * @param maybeInput  ‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï ResolveInput `{ place_id_by_ggm: string }`
 *
 * @returns place ‡πÅ‡∏ñ‡∏ß‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á `public.place` ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï/‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ `id`)
 *
 * @throws {Error} "missing_google_places_api_key"  ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡πà‡∏á API key ‡∏°‡∏≤
 * @throws {Error} "place_id_required"             ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ place_id ‡πÅ‡∏•‡∏∞ DB ‡∏Å‡πá‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
 */
export async function processPlaces(
  t: ITask<any> | IDatabase<any>,
  apiKey: string,
  input: ResolveInput
): Promise<place>;
export async function processPlaces(
  apiKey: string,
  input: ResolveInput
): Promise<place>;
export async function processPlaces(
  tOrApiKey: ITask<any> | IDatabase<any> | string,
  maybeApiKey: string | ResolveInput,
  maybeInput?: ResolveInput
): Promise<place> {
  const r = runner(typeof tOrApiKey === "string" ? undefined : (tOrApiKey as any));
  const apiKey = typeof tOrApiKey === "string" ? (tOrApiKey as string) : (maybeApiKey as string);
  const input = (typeof tOrApiKey === "string"
    ? (maybeApiKey as ResolveInput)
    : (maybeInput as ResolveInput));

  if (!apiKey) throw new Error("missing_google_places_api_key");

  if (input.place_id_by_ggm){
    const existedid = await findPlaceInDB(r, input);
    if (!existedid) {
      console.log(`[CREATE] üïµÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö "${input.place_id_by_ggm}", ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...`);
      const newPlace = await fetchGooglePlaceDetails(apiKey, input.place_id_by_ggm);
      if(newPlace){
        return await savePlaceToDB(r, newPlace as PlaceInsert);
      }
      throw new Error("Failed to fetch place details from Google");

    } else if (isStale(existedid.updated_at)) {
      console.log(`[UPDATE] üîÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á "${existedid.name_place}" ‡πÄ‡∏Å‡πà‡∏≤, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï...`);
      const newPlace = await fetchGooglePlaceDetails(apiKey, input.place_id_by_ggm);
      if(newPlace){
        return await updatePlaceInDB(r, existedid.id, newPlace as PlacePatch);
      }
      console.warn("Failed to update place in database using old data");
    } else {
      console.log(`location is ${typeof existedid.location}, skip update`);
      return existedid;
    }
  }

  if (input.location) {
    const existedloc = await findPlaceInDB(r, input);
    if (!existedloc) {
      console.log(`[CREATE] üïµÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...`);
      return await savePlaceLocationToDB(r, input.location);
    }else {
      return existedloc;
    }
  }
  throw new Error("No valid input provided to processPlaces");
};

/** (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ) batch ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß */
export async function processPlacesBatch(
  t: ITask<any> | IDatabase<any>,
  apiKey: string,
  inputs: ResolveInput[]
): Promise<place[]>;
export async function processPlacesBatch(
  apiKey: string,
  inputs: ResolveInput[]
): Promise<place[]>;
export async function processPlacesBatch(
  tOrApiKey: ITask<any> | IDatabase<any> | string,
  maybeApiKey: string | ResolveInput[],
  maybeInputs?: ResolveInput[]
): Promise<place[]> {
  const r = runner(typeof tOrApiKey === "string" ? undefined : (tOrApiKey as any));
  const apiKey = typeof tOrApiKey === "string" ? (tOrApiKey as string) : (maybeApiKey as string);
  const inputs = (typeof tOrApiKey === "string"
    ? (maybeApiKey as ResolveInput[])
    : (maybeInputs as ResolveInput[])) ?? [];

  const tasks = inputs.map((inp) => processPlaces(r, apiKey, inp).catch(() => null));
  const settled = await Promise.all(tasks);
  return settled.filter((p): p is place => !!p);
};
